package main

import (
	"fmt"
)

// =============================================================================

// These functions are concrete implementations of print functions that can
// only work with slices of the specified type.

func print[T any](slice []T) {
	fmt.Print("Generic: ")
	for _, v := range slice {
		fmt.Print(v, " ")
	}
	fmt.Print("\n")
}

// lets make an identity function
func id[U any](arg U) U{
	return arg
}

// Ref: https://github.com/ardanlabs/gotraining/blob/master/topics/go/generics/05-type-constraint/generic.go2
type addOnly interface {
	type int, int8, int16, int32, int64, float64
}

func add[U addOnly](x U, y U) U {
	return x + y 
}

func addOne[U addOnly](x U) U {
	return add(x, 1)
}

type Operator[U any] func(x U) U

func fmap[T any](f Operator[T], slice []T) []T {
	out := make([]T, len(slice))
	for i, v := range slice {
		out[i] = f(v)
	}
	return out
}

type Predicate[U any] func(U) bool

func allowAll[U any](_ U) bool {
	return true
}

func denyAll[U any](_ U) bool {
	return false
}

func filter[T any](p Predicate[T], slice []T) []T {
	out := make([]T, 0, len(slice))
	for _, v := range slice {
		if p(v) {
			out = append(out, v)
		}
	}
	return out
}

func rule1(v float64) bool {
	if v < 2.0 {
		return true
	} else {
		return false
	}
}

type Accumulator[U any, T any] func(acc U, x T) U

// let's try the fun one -- foldl
func foldl[U any, T any](f Accumulator[U, T], acc U, slice []T) U {
	var out U = acc
	for _, v := range slice {
		out = f(out, v)
	}
	return out
}

func sum(acc float64, x float64) float64 {
	return acc + x 
}

// =============================================================================

func main() {
	numbers := []float64{1.1, 2.2, 3.3}
	// for now, seems like explicitly declare type is needed, i.e. id[int]
	print(fmap(addOne[float64], numbers))

	print(filter(denyAll[float64], numbers))
	print(filter(rule1, numbers))

	// this doesn't work for some reason
	// revisit it later
	// print(foldl(sum[float64, float64], 0.0, numbers))
}
