package main

import (
	"fmt"
)

// =============================================================================

// These functions are concrete implementations of print functions that can
// only work with slices of the specified type.

func print[T any](slice []T) {
	fmt.Print("Generic: ")
	for _, v := range slice {
		fmt.Print(v, " ")
	}
	fmt.Print("\n")
}


// lets make an identity function
func id[U any](arg U) U{
	return arg
}

// Ref: https://github.com/ardanlabs/gotraining/blob/master/topics/go/generics/05-type-constraint/generic.go2
type addOnly interface {
	type int, int8, int16, int32, int64, float64
}

func add[U addOnly](x U, y U) U {
	return x + y 
}

func addOne[U addOnly](x U) U {
	return add(x, 1)
}

// how to do a map?
type operator[U any] func(x U) U
func myMap[T any](f operator[T], slice []T) []T {
	out := make([]T, len(slice))
	for i, v := range slice {
		out[i] = f(v)
	}
	return out
}

// =============================================================================

func main() {
	numbers := []float64{1.1, 2.2, 3.3}
	// for now, seems like explicitly declare type is needed, i.e. id[int]
	print(myMap(addOne[float64], numbers))
}
